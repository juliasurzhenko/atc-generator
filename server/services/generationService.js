// const mysql = require('mysql2/promise');
const xlsx = require('xlsx');
const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const { PDFDocument } = require('pdf-lib');
const { v4: uuidv4 } = require('uuid');
const pool = require('../models/db');
const mammoth = require("mammoth");

async function getAllProgramResults() {
    try {
        // üîπ –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏ –∑ —Ç–∞–±–ª–∏—Ü—ñ `programs`
        const [programs] = await pool.query("SELECT program_name, filedata FROM programs");

        if (programs.length === 0) {
            throw new Error("‚ùå –ü—Ä–æ–≥—Ä–∞–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ —É –±–∞–∑—ñ!");
        }
        
        // üîπ –ú–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
        const programResults = [];

        // üîπ –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–∂–µ–Ω DOCX-—Ñ–∞–π–ª
        for (const program of programs) {
            const { program_name, filedata } = program;

            if (!filedata) {
                console.warn(`‚ö†Ô∏è –§–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–∏ "${program_name}" –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –∑–±–µ—Ä–µ–∂–µ–Ω–∏–π!`);
                programResults.push({ programName: program_name, expectedResults: "–î–∞–Ω—ñ –≤—ñ–¥—Å—É—Ç–Ω—ñ" });
                continue;
            }

            // üîπ –í–∏—Ç—è–≥—É—î–º–æ —Ç–µ–∫—Å—Ç —ñ–∑ DOCX
            const { value: text } = await mammoth.extractRawText({ buffer: filedata });
            const lines = text.split("\n");

            let expectedResults = "";
            let foundResultsSection = false;

            for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();

                if (line.startsWith("–û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è")) {
                    foundResultsSection = true;
                    expectedResults = "";
                }

                if (foundResultsSection && line.length > 0 && !line.startsWith("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞")) {
                    expectedResults += line + " ";
                }

                if (line.startsWith("–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ –ª—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞")) {
                    break;
                }
            }

            programResults.push({
                programName: program_name,
                expectedResults: expectedResults.trim() || "–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ",
            });
        }
        console.log(`programResults - ${JSON.stringify(programResults, null, 2)}`);
        
        return programResults;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º:", error);
        throw error;
    }
}

// –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ñ—É–Ω–∫—Ü—ñ—ó
// getProgramResults().then(data => {
//     console.log("üìå –ü—Ä–æ–≥—Ä–∞–º–∞:", data.programName);
//     console.log("üìå –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:", data.expectedResults);
// }).catch(err => console.error(err));

/**
 * üìå –û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –∑ Excel
 */
async function getParticipantsData() {
    const [rows] = await pool.query("SELECT participants_filedata FROM generaldata ORDER BY id DESC LIMIT 1");

    if (rows.length === 0) {
        throw new Error("‚ùå –§–∞–π–ª —É—á–∞—Å–Ω–∏–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    }

    const fileBuffer = rows[0].participants_filedata;
    const workbook = xlsx.read(fileBuffer, { type: 'buffer' });
    const sheetName = workbook.SheetNames[0];
    const sheet = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);

    return sheet.map(row => ({
        name: row["–Ü–º'—è"],  
        surname: row["–ü—Ä—ñ–∑–≤–∏—â–µ"], 
        third_name: row["–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ"], 
        subject: row["–ü—Ä–µ–¥–º–µ—Ç"],
        program: row["–ù–∞–π–º–µ–Ω—É–≤–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏"]
    }));
}

/**
 * üìå –û—Ç—Ä–∏–º–∞—Ç–∏ —à–∞–±–ª–æ–Ω —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞
 */
async function getTemplateFile() {
    const [rows] = await pool.query("SELECT template_filedata FROM generaldata ORDER BY id DESC LIMIT 1");

    if (rows.length === 0) {
        throw new Error("‚ùå –®–∞–±–ª–æ–Ω —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
    }

    return rows[0].template_filedata;
}

/**
 * üìå –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è PDF-—Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∞ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —É—á–∞—Å–Ω–∏–∫–∞
 */
async function generateCertificates() {
    try {
        const participants = await getParticipantsData();
        // const programs = await getProgramResults();
        // const templateBuffer = await getTemplateFile();
        if (!fs.existsSync("certificates")) {
            fs.mkdirSync("certificates");
        }

        const generatedFiles = [];

        for (const participant of participants) {
            console.log(
                `Participant name ${participant.name} 
                Participant surname ${participant.surname} 
                Participant third_name ${participant.third_name} 
                Participant program ${participant.program}`
            );
            
            // const pdfDoc = await PDFDocument.load(templateBuffer);
            // const page = pdfDoc.getPage(0);
            // const { name, program } = participant;

            // // üìå –î–æ–¥–∞—Ç–∏ —Ç–µ–∫—Å—Ç –Ω–∞ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç
            // page.drawText(name, { x: 150, y: 500, size: 24 });
            // page.drawText(program, { x: 150, y: 450, size: 18 });

            // // üìå –ó–±–µ—Ä–µ–≥—Ç–∏ PDF
            // const pdfBytes = await pdfDoc.save();
            // const fileName = `certificates/${uuidv4()}.pdf`;
            // fs.writeFileSync(fileName, pdfBytes);

            // generatedFiles.push({ name, program, fileName });
        }

        getAllProgramResults().then(data => {
            // Iterate over the array and log each program's results
            data.forEach(program => {
                console.log("üìå –ü—Ä–æ–≥—Ä–∞–º–∞:", program.programName);
                console.log("üìå –û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:", program.expectedResults);
            });
        }).catch(err => console.error(err));        

        // console.log(`‚úÖ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ: ${generatedFiles.length}`);

        // return generatedFiles;
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤:", error);
        throw error;
    }
}

/**
 * üìå –ï–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –≤–∏–∫–ª–∏–∫—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
 */
const generateCertificatesHandler = async (req, res) => {
    try {
        const generatedFiles = await generateCertificates();
        res.json({ message: "‚úÖ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ —É—Å–ø—ñ—à–Ω–æ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ", files: generatedFiles });
    } catch (error) {
        res.status(500).json({ error: "‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤" });
    }
};

module.exports = { generateCertificatesHandler };


//---------------------------------------------------------------------------
// const express = require("express");
// const fileUpload = require("express-fileupload");
// const fs = require("fs");
// const path = require("path");
// const mammoth = require("mammoth"); // For extracting text from DOCX
// const excel = require("xlsx"); // For reading Excel
// const archiver = require("archiver");

// const app = express();
// app.use(express.json());
// app.use(fileUpload());

// // Paths
// const TEMPLATE_FILE = path.join(__dirname, "template_test.docx");
// const OUTPUT_DIR = path.join(__dirname, "certificates");
// if (!fs.existsSync(OUTPUT_DIR)) fs.mkdirSync(OUTPUT_DIR);

// // Extract text from Word file
// async function extractExpectedResults(docPath, targetHeading = "–û—á—ñ–∫—É–≤–∞–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ –Ω–∞–≤—á–∞–Ω–Ω—è") {
//     const buffer = fs.readFileSync(docPath);
//     const result = await mammoth.extractRawText({ buffer });
//     const lines = result.value.split("\n");
    
//     for (let i = 0; i < lines.length; i++) {
//         if (lines[i].includes(targetHeading)) return lines[i + 1] || "No data found.";
//     }
//     return "No data found.";
// }

// // Generate certificates
// async function generateCertificates(excelPath, expectedResults) {
//     const workbook = excel.readFile(excelPath);
//     const sheetName = workbook.SheetNames[0];
//     const sheet = excel.utils.sheet_to_json(workbook.Sheets[sheetName]);

//     for (let row of sheet) {
//         const name = `${row["–ü—Ä—ñ–∑–≤–∏—â–µ"]} ${row["–Ü–º'—è"]} ${row["–ü–æ –±–∞—Ç—å–∫–æ–≤—ñ"]}`;
//         const date = row["–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"] || "–î–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞";
//         const award = row["–ë–∞–ª"] || "–ë–∞–ª –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π";

//         let docText = fs.readFileSync(TEMPLATE_FILE, "utf8");
//         docText = docText.replace("{name}", name)
//                          .replace("{date}", date)
//                          .replace("{award}", award)
//                          .replace("{results}", expectedResults);

//         const outputFilename = path.join(OUTPUT_DIR, `certificate_${name.replace(/ /g, "_")}.docx`);
//         fs.writeFileSync(outputFilename, docText);
//         console.log(`Certificate saved for ${name}`);
//     }

//     // Create a zip archive
//     const zipPath = path.join(__dirname, "certificates.zip");
//     const output = fs.createWriteStream(zipPath);
//     const archive = archiver("zip", { zlib: { level: 9 } });

//     archive.pipe(output);
//     archive.directory(OUTPUT_DIR, false);
//     await archive.finalize();

//     console.log(`Certificates archived at ${zipPath}`);
//     return zipPath;
// }

// // API to upload Excel and generate certificates
// app.post("/generate-certificates", async (req, res) => {
//     if (!req.files || !req.files.excelFile) return res.status(400).send("No file uploaded.");

//     const excelPath = path.join(__dirname, req.files.excelFile.name);
//     await req.files.excelFile.mv(excelPath);

//     const expectedResults = await extractExpectedResults(TEMPLATE_FILE);
//     const zipPath = await generateCertificates(excelPath, expectedResults);

//     res.download(zipPath);
// });

// app.listen(5000, () => console.log("Server running on port 5000"));
