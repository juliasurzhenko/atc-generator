const pool = require("../models/db");

/**
 * üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –ø—Ä–æ–≥—Ä–∞–º–∏
 */
const getAllPrograms = async (req, res) => {
    try {
        const [rows] = await pool.query("SELECT id, program_name, filename, uploaded_at FROM programs");
        res.json(rows);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤—É –ø—Ä–æ–≥—Ä–∞–º—É
 */
const createProgram = async (req, res) => {
    try {
        const { program_name } = req.body;
        const filename = req.file.originalname;
        const filedata = req.file.buffer;

        const [result] = await pool.query(
            "INSERT INTO programs (program_name, filename, filedata) VALUES (?, ?, ?)",
            [program_name, filename, filedata]
        );

        res.json({ message: "‚úÖ –ü—Ä–æ–≥—Ä–∞–º—É —Å—Ç–≤–æ—Ä–µ–Ω–æ", id: result.insertId });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∑–∞ ID
 */
const getProgramById = async (req, res) => {
    try {
        const { id } = req.params;
        const [rows] = await pool.query("SELECT * FROM programs WHERE id = ?", [id]);

        if (rows.length === 0) {
            return res.status(404).json({ error: "–ü—Ä–æ–≥—Ä–∞–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        res.json(rows[0]);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –û–Ω–æ–≤–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∑–∞ ID
 */
const updateProgram = async (req, res) => {
    try {
        const { id } = req.params;
        const { program_name } = req.body;
        let filename = req.file ? req.file.originalname : null;
        let filedata = req.file ? req.file.buffer : null;

        const query = `
            UPDATE programs
            SET program_name = ?, 
                filename = ?, 
                filedata = ?
            WHERE id = ?
        `;
        const [result] = await pool.query(query, [program_name, filename, filedata, id]);

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "–ü—Ä–æ–≥—Ä–∞–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        res.json({ message: "‚úÖ –ü—Ä–æ–≥—Ä–∞–º—É –æ–Ω–æ–≤–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –í–∏–¥–∞–ª–∏—Ç–∏ –ø—Ä–æ–≥—Ä–∞–º—É –∑–∞ ID
 */
const deleteProgram = async (req, res) => {
    try {
        const { id } = req.params;
        const [result] = await pool.query("DELETE FROM programs WHERE id = ?", [id]);

        if (result.affectedRows === 0) {
            return res.status(404).json({ error: "–ü—Ä–æ–≥—Ä–∞–º—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        res.json({ message: "‚úÖ –ü—Ä–æ–≥—Ä–∞–º—É –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
module.exports = {
    getAllPrograms,
    createProgram,
    getProgramById,
    updateProgram,
    deleteProgram
};
