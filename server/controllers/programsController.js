const pool = require("../models/db");

/**
 * üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–∞–π–ª–∏ –ø—Ä–æ–≥—Ä–∞–º
 */
const getAllPrograms = async (req, res) => {
    try {
        const [rows] = await pool.query("SELECT id, program_name, filename, uploaded_at FROM program_files");
        res.json(rows);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–π —Ñ–∞–π–ª –ø—Ä–æ–≥—Ä–∞–º–∏
 */
const uploadProgramFile = async (req, res) => {
    try {
        const { program_name } = req.body;
        const file = req.file;

        if (!program_name || !file) {
            return res.status(400).json({ error: "–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –≤–∫–∞–∑–∞—Ç–∏ –Ω–∞–∑–≤—É –ø—Ä–æ–≥—Ä–∞–º–∏ —ñ —Ñ–∞–π–ª" });
        }

        const [result] = await pool.query(
            "INSERT INTO program_files (program_name, filename, filedata) VALUES (?, ?, ?)",
            [program_name, file.originalname, file.buffer]
        );

        res.json({ message: "‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ", fileId: result.insertId });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª –∑–∞ ID
 */
const downloadProgramFileById = async (req, res) => {
    try {
        const { id } = req.params;
        const [rows] = await pool.query("SELECT filename, filedata FROM program_files WHERE id = ?", [id]);

        if (rows.length === 0) {
            return res.status(404).json({ error: "–§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        const file = rows[0];
        res.setHeader("Content-Disposition", `attachment; filename=${file.filename}`);
        res.send(file.filedata);
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

/**
 * üìå –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª –∑–∞ ID
 */
const deleteProgramFileById = async (req, res) => {
    try {
        const { id } = req.params;
        await pool.query("DELETE FROM program_files WHERE id = ?", [id]);
        res.json({ message: "‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ" });
    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};

// –ï–∫—Å–ø–æ—Ä—Ç—É—î–º–æ –≤—Å—ñ —Ñ—É–Ω–∫—Ü—ñ—ó
module.exports = {
    getAllPrograms,
    uploadProgramFile,
    downloadProgramFileById,
    deleteProgramFileById
};
