const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const pool = require("../models/db");

const SECRET_KEY = process.env.SECRET_KEY;

const login = async (req, res) => {
  res.setHeader('Access-Control-Allow-Origin', process.env.ORIGIN);
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, Authorization');
  res.setHeader('Access-Control-Allow-Credentials', 'true');

  console.log("üîπ –û—Ç—Ä–∏–º–∞–Ω–∏–π –∑–∞–ø–∏—Ç:", req.method, req.headers['content-type']);
  console.log("üì¶ –î–∞–Ω—ñ —É body:", req.body);

  const { username, password } = req.body;
  console.log("üë§ –õ–æ–≥—ñ–Ω:", username);
  console.log("üîë –ü–∞—Ä–æ–ª—å:", password);

  if (!username || !password) {
    return res.status(400).json({ message: "–õ–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ñ!" });
  }

  try {
    const [result] = await pool.query(`SELECT * FROM users WHERE username = ?`, [username]);

    if (result.length === 0) {
      console.warn("‚ö†Ô∏è –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    const user = result[0];
    console.log("üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–∏–π:", user);

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      console.warn("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å");
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –ª–æ–≥—ñ–Ω –∞–±–æ –ø–∞—Ä–æ–ª—å' });
    }

    const token = jwt.sign({ id: user.id, username: user.username }, SECRET_KEY, {
      expiresIn: '24h',
    });

    console.log("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, —Ç–æ–∫–µ–Ω:", token);
    return res.status(200).json({ message: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞', token });
  } catch (err) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", err);
    return res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', error: err });
  }
};

const verifyToken = (req, res, next) => {
  const token = req.headers['authorization'];
  
  if (!token) {
    return res.status(401).json({ message: '–ù–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω' });
  }

  jwt.verify(token.split(' ')[1], SECRET_KEY, (err, decoded) => {
    if (err) {
      if (err.name === 'TokenExpiredError') {
        return res.status(401).json({ message: '–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ' });
      }
      return res.status(401).json({ message: '–ù–µ–¥—ñ–π—Å–Ω–∏–π —Ç–æ–∫–µ–Ω' });
    }
    req.user = decoded;
    next();
  });
};

module.exports = { login, verifyToken };
