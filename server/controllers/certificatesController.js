const pool = require("../models/db");
const archiver = require("archiver");
const fs = require("fs");
const path = require("path");

/**
 * üìå –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –¥–ª—è `generaldata_id` —Ç–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ ZIP-–∞—Ä—Ö—ñ–≤
 */
const getCertificatesByGeneralDataId = async (req, res) => {
    try {
        const { id } = req.params;
        // console.log(req);

        // –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –¥–ª—è `generaldata_id`
        const [certificates] = await pool.query(
            "SELECT certificate_filename, certificate_filedata FROM certificates WHERE generaldata_id = ?", [id]
        );

        if (certificates.length === 0) {
            return res.status(404).json({ error: "–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
        }

        // üîπ –°—Ç–≤–æ—Ä—é—î–º–æ –∞—Ä—Ö—ñ–≤
        const zipPath = path.join(__dirname, "../temp_certificates", `certificates_${id}.zip`);
        const output = res; // –ù–∞–ø—Ä–∞–≤–ª—è—î–º–æ –∞—Ä—Ö—ñ–≤ –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –≤ –ø–æ—Ç—ñ–∫ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        const archive = archiver("zip", { zlib: { level: 9 } });

        archive.pipe(output);

        // –î–æ–¥–∞—î–º–æ –∫–æ–∂–µ–Ω —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –≤ –∞—Ä—Ö—ñ–≤ –±–µ–∑ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–∞ –¥–∏—Å–∫
        for (const cert of certificates) {
            archive.append(cert.certificate_filedata, { name: cert.certificate_filename });
        }

        await archive.finalize();

    } catch (error) {
        console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤:", error);
        res.status(500).json({ error: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
};


module.exports = { getCertificatesByGeneralDataId };
