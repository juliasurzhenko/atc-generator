import React, { useEffect, useState } from 'react';
import { Upload, Button, Table, message } from 'antd';
import { UploadOutlined, DeleteOutlined, FileZipOutlined } from '@ant-design/icons';
import axios from 'axios';
import { Divider } from "antd";
import { RcFile } from 'antd/es/upload';

const GenerationPage: React.FC = () => {
  const [files, setFiles] = useState<{ id: number; participants_filename: string; template_filename: string }[]>([]);
  const [participantsFile, setParticipantsFile] = useState<File | null>(null);
  const [templateFile, setTemplateFile] = useState<File | null>(null);
  const [loading, setLoading] = useState(false);
  const [generatedCertificates, setGeneratedCertificates] = useState<{ [key: number]: boolean }>({});

  useEffect(() => {        
    fetchFiles();
  }, []);

  useEffect(() => {    
    console.log(downloadCertificatesZip);
  });

  const fetchFiles = async () => {
    try {
      const response = await axios.get(`${import.meta.env.VITE_API_URL}/generaldata`);
      console.log(response.data);
      
      setFiles(response.data);
  
      const certPromises = response.data.map(async (file: { id: number }) => {
        try {
          const certResponse = await axios.get(`${import.meta.env.VITE_API_URL}/certificates/generaldata/${file.id}`);
          return { id: file.id, hasCertificates: certResponse.data.length > 0 };
        } catch (err) {
          console.error(`–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤ –¥–ª—è —Ñ–∞–π–ª—É ${file.id}:`, err);
          return { id: file.id, hasCertificates: false }; // –Ø–∫—â–æ –∑–∞–ø–∏—Ç –ø—Ä–æ–≤–∞–ª–∏–≤—Å—è, –≤–≤–∞–∂–∞—î–º–æ, —â–æ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ
        }
      });
  
      const certResults = await Promise.all(certPromises);
  
      const certStatus = certResults.reduce((acc, { id, hasCertificates }) => {
        acc[id] = hasCertificates;
        return acc;
      }, {} as { [key: number]: boolean });
  
      setGeneratedCertificates(certStatus);
  
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
    }
  };
  

  const handleUpload = async () => {
    if (!participantsFile || !templateFile) {
      message.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å –æ–±–∏–¥–≤–∞ —Ñ–∞–π–ª–∏!');
      return;
    }

    const formData = new FormData();
    formData.append('participantsFile', participantsFile);
    formData.append('templateFile', templateFile);

    try {
      await axios.post(`${import.meta.env.VITE_API_URL}/generaldata/upload`, formData);
      message.success('–§–∞–π–ª–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ');
      fetchFiles();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–∞–π–ª—ñ–≤:', error);
      message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏.');
    }
  };

  const deleteFile = async (id: number) => {
    try {
      await axios.delete(`${import.meta.env.VITE_API_URL}/generaldata/${id}`);
      message.success('–§–∞–π–ª –≤–∏–¥–∞–ª–µ–Ω–æ');
      fetchFiles();
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–∞–π–ª—É:', error);
      message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–∞–π–ª.');
    }
  };

  const generateCertificates = async (id: number) => {
    try {
      setLoading(true);
      const response = await axios.post(`${import.meta.env.VITE_API_URL}/generation/generate/${id}`);
      message.success('‚úÖ –°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω—ñ!');
      console.log(response.data);

      // ‚úÖ –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
      await fetchFiles();
    } catch (error) {
      message.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤');
    } finally {
      setLoading(false);
    }
  };

  const downloadCertificatesZip = async (id: number) => {
    try {
        const response = await axios.get(`${import.meta.env.VITE_API_URL}/certificates/generaldata/${id}`, {
            responseType: 'blob', // üîπ –í–∞–∂–ª–∏–≤–æ! –í–∫–∞–∑—É—î–º–æ, —â–æ –æ—Ç—Ä–∏–º—É—î–º–æ —Ñ–∞–π–ª
        });

        // üîπ –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è —Å–∫–∞—á—É–≤–∞–Ω–Ω—è ZIP-—Ñ–∞–π–ª—É
        const url = window.URL.createObjectURL(new Blob([response.data]));
        const link = document.createElement('a');
        link.href = url;
        link.setAttribute('download', `certificates_${id}.zip`); // üîπ –ù–∞–∑–≤–∞ —Ñ–∞–π–ª—É
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    } catch (error) {
        console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ZIP-—Ñ–∞–π–ª—É:', error);
        message.error('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ZIP-—Ñ–∞–π–ª.');
    }
  };


  return (
    <div>
      <h2 className="text-2xl mb-4">–°—Ç–æ—Ä—ñ–Ω–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—ñ–≤</h2>
      <Divider />

      <div className='flex gap-4 items-center my-6'>
        <Upload 
          accept=".xlsx"
          beforeUpload={(file: RcFile) => {
            const isXLSX = file.type === 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet';
            if (!isXLSX) {
              message.error('–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—É .xlsx');
              return Upload.LIST_IGNORE;
            }
      
            setParticipantsFile(file);
            return false; // –ó–∞–ø–æ–±—ñ–≥–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ–º—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—é
          }}
          showUploadList={{ showRemoveIcon: true }}
          maxCount={1}      
        >
          <Button icon={<UploadOutlined />}>–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —ñ–∑ —É—á–∞—Å–Ω–∏–∫–∞–º–∏</Button>
        </Upload>
        <Upload 
          accept=".docx"
          beforeUpload={(file: RcFile) => {
            const isDOCX = file.type === 'application/vnd.openxmlformats-officedocument.wordprocessingml.document';
            if (!isDOCX) {
              message.error('–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç—É .docx');
              return Upload.LIST_IGNORE;
            }
      
            setTemplateFile(file);
            return false;
          }}
          showUploadList={{ showRemoveIcon: true }}
          maxCount={1}
        >
          <Button icon={<UploadOutlined />}>
            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —à–∞–±–ª–æ–Ω —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç—É
          </Button>
        </Upload>
        <Button type="primary" onClick={handleUpload} className='shadow-xl'>
          –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ñ–∞–π–ª–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó
        </Button>        
      </div>
      <Divider />


      <Table 
        dataSource={files.map((file, index) => ({ ...file, key: file.id || index }))}
        rowKey="key" 
        pagination={false} 
        style={{ marginTop: 20 }}>
        <Table.Column
          title="–§–∞–π–ª —É—á–∞—Å–Ω–∏–∫—ñ–≤"
          dataIndex="participants_filename"
          key="participants_filename"
        />
        <Table.Column
          title="–§–∞–π–ª —à–∞–±–ª–æ–Ω—É"
          dataIndex="template_filename"
          key="template_filename"
        />
        <Table.Column
          title="–°–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏"
          key="certificates"
          render={(_, record) => (
            generatedCertificates[record.id] ? (
              <Button icon={<FileZipOutlined />} loading={loading} onClick={() => downloadCertificatesZip(record.id)} style={{ marginTop: 8 }} >
                –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ ZIP
              </Button>
            ) : (
              <Button type="primary" loading={loading} onClick={() => generateCertificates(record.id)} style={{ marginTop: 8 }}>
                –ì–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏
              </Button>
            )
          )}
        />
        <Table.Column
          title="–î—ñ—ó"
          key="actions"
          render={(_, record) => (
            <div className='grid gap-3 place-content-center '>
              <Button danger loading={loading} icon={<DeleteOutlined />} onClick={() => deleteFile(record.id)} style={{ marginLeft: 8 }}>
                –í–∏–¥–∞–ª–∏—Ç–∏
              </Button>
            </div>
          )}
        />
      </Table>


    </div>
  );
};

export default GenerationPage;
